import logging

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from db.db_utils import get_menu_categories, get_delivery_types, get_products_by_category_as_menu, get_order_history


# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
def nav_keyboard(is_admin=False):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é")],
        [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")],
        [KeyboardButton(text="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]
    ])

    if is_admin:
        keyboard.keyboard.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])

    return keyboard


def categories_keyboard():
    categories = get_menu_categories()

    if not categories:
        return None

    row_width = 4
    rows = [categories[i:i + row_width] for i in range(0, len(categories), row_width)]

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[])

    for row in rows:
        keyboard.keyboard.append([KeyboardButton(text=name) for _, name in row])

    keyboard.keyboard.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])

    return keyboard


def get_deletion_keyboard(category_id):
    products = get_products_by_category_as_menu(category_id)
    logging.info(f"products: {products}")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    row_width = 2
    rows = [products[i:i + row_width] for i in range(0, len(products), row_width)]

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏: –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
    for row in rows:
        keyboard.keyboard.append([KeyboardButton(text=item["name"]) for item in row])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    keyboard.keyboard.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])

    return keyboard


def get_delivery_type_markup():
    delivery_types = get_delivery_types()  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{'id_type': ..., 'delivery_type': ...}, ...]

    if delivery_types:
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ ‚Äî –¥–≤–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        buttons_row_1 = [
            InlineKeyboardButton(
                text=dt['name'],
                callback_data=f"delivery_type_{dt['id_type']}"
            ) for dt in delivery_types
        ]

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ ‚Äî –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons_row_2 = [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_cart")
        ]

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[buttons_row_1, buttons_row_2]
        )
        return keyboard
    else:
        return None


def delivery_time_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", callback_data="delivery_time_ASAP")],
        [InlineKeyboardButton(text="–ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="delivery_time_scheduled")]
    ])
    return keyboard


def admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


def status_keyboard(order_id: int) -> InlineKeyboardMarkup:
    statuses = ["–û—Ñ–æ—Ä–º–ª–µ–Ω", "–ì–æ—Ç–æ–≤–∏—Ç—Å—è", "–ü–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É", "–ì–æ—Ç–æ–≤", "–ó–∞–≤–µ—Ä—à–µ–Ω"]

    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(text=status, callback_data=f"update_status_{order_id}_{status}")] for status in statuses
    ])
    return keyboard


def add_select_button(product_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"order_{product_id}")]
        ]
    )

def add_cancel_select_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_select")]
        ]
    )


def add_order_button(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"process_order_{order_id}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_cart_{order_id}")]
        ]
    )


def generate_edit_cart_keyboard(cart_items) -> InlineKeyboardMarkup:
    keyboard = []
    for item in cart_items:
        button_text = f"{item['product_name']} (x{item['quantity']})"
        callback_data = f"edit_item_{item['id_product']}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_cart")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def generate_edit_actions_keyboard(product_id) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_quantity_{product_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_from_cart_{product_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_cart")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def add_accept_data_processing_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="accept_data_processing")]
        ]
    )


def add_cancel_order_keyboard(tg_user_id) -> InlineKeyboardMarkup:
    orders = get_order_history(tg_user_id)
    keyboard = []
    for order in orders:
        if order['status'] in ['–û—Ñ–æ—Ä–º–ª–µ–Ω', '–ì–æ—Ç–æ–≤–∏—Ç—Å—è']:
            keyboard.append(
                [InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order['id_orders']}",
                                      callback_data=f"cancel_order_{order['id_orders']}")]
            )
            print(f"cancel_order_{order['id_orders']}")
    return InlineKeyboardMarkup(
        inline_keyboard=keyboard
    )
